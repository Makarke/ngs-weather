Исходя из полученного задания архитектура для проекта была выбрана следующая:
list.php - основная страница со списком избранных городов
info.php - страница информации для выбранного города с прогнозом погоды и архивом

db.php - класс для работы с базой данных
func.php - инклуд для выноски используемых функций в отдельный документ

style.css - таблица стилей для страниц
Такой подход дал возможность избежать повторяющихся участков кода и простоту редактирование кода.

Для работы с API я использовал технологию cURL, так как она наиболее подходит для этих целей, так как:
1. Она позволяет проводить оперативный дебаг
2. Она проста в использовании
3. Она позволяет проводить гибкие настройки параметров для запросов
К сожалению, другие варианты я не рассматривал в связи с тем, что пользовался только cURL`ом.
Так же я не имел опыта работы с REST API, возможно она позволяет выводить только необходимую информацию, но увы.

Для сохранения данных о городе, отображаемого в верхнем блоке страницы использовались браузерные сессии.
На мой взгляд они наиболее подходящие для сохранение простых переменных и их обработки. 
Все эти преимущества вкупе позволили сохранять и отображать верхний блок корректно, используя минимум строк кода.
Помимо верхнего блока сессии использются и в переносе данных между основной и дополнительной страницей.

Также печально обстоят дела и с использованием MongoDB, до момента выполнения этого задания я не знал о существовании этой СУБД.
Пришлось импровизировать и использовать ресурсы портала http://php.net/ , возможно полученный код возможно оптимизировать, 
используя более корректные условия для выборки.

Для реализации автообновления архива погоды можно использовать программу cron, входящую в стандартный пакет unix систем.
Ее функционал более чем подходит для этого простейшего действия.
cron */10 * * * * /usr/local/bin/php /var/www/update.php

Готов принять критику и обсудить любые спорные моменты.


